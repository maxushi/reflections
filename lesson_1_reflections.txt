How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Only need to look at the difference to see the bug, not the whole file (assuming was working before)

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Can see all changes to file. If know when a bug was introduced, can easily locate bad code. Can go back to any point in history if wish.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manual: bigger commits but more user friendly -> well defined milestones. logical. Easier to review later.
    Auto: smaller more often commits but not as user friendly, no control

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Google Docs: each file is independent of each other
    Git: combination of files represents some part of system. files related.

How can you use the commands git log and git diff to view the history of files?

    git log --stat
    git log --graph --oneline branch1 branch2
    git log -n # <- number of commits to show

    git diff commitId1 commitId2
    git diff <- diff between working directory and staging area
    git diff --staged <- diff between staging area and repo

    git checkout commitId <- checkout a commit in this branch = go to snapshot of all files at this point
    git checkout branchName <- switch to top commit of branch
    git checkout -b branchName <- create new branch + switch to it

    git init
    git status

    git add <- add changes to staging area

    git branch <- list branches
    git branch branchName <- creates new branch, but doesn't switch
    git branch -d branchName <- deletes

    git merge featureBranch <- when on master branch, will merge featureBranch into master

    git show someCommit <- will produce diff based on commit's actual parent, 1) without having to know parent 2) when merging, not obvious what parent is, because commits get interleaved by timestamp
    

    git pull
    git push <- pushes differences between local branch and remote branch to remote branch
    git push -u origin branchName <- push branchName to remote repo called origin (setup before) and start tracking

    git remote -v <- view remote repos
    git remote add origin https://github.com/maxushi/reflections.git <- add a remote repo to associate with this local repo. 'origin' is a standard name to refer to this remote repo

How might using version control make you more confident to make changes that
could break something?

    Can always go back to state before change.

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here



Notes:
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit